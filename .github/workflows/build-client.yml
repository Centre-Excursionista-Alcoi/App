name: Release Binaries

on:
  release:

jobs:
  update-version-name:
    name: Update version name
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Update version name
        run: python ./composeApp/scripts/updateVersionName.py --name=${{ github.event.release.name }}

      - name: Increase version code
        id: increase_version_code
        run: python ./composeApp/scripts/increaseVersionCode.py

      - name: Commit modified version code file
        id: commit_version_code
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'Updated Version'
          file_pattern: 'composeApp/version.txt iosApp/iosApp.xcodeproj/project.pbxproj iosApp/iosApp/Info.plist'
          branch: master

  build-desktop:
    name: Build for Desktop
    runs-on: ${{ matrix.os }}

    needs: update-version-name
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

      - name: Package release distribution
        if: ${{ matrix.os != 'macos-latest' }}
        run: ./gradlew :composeApp:packageDistributionForCurrentOS

      - name: Install the Apple certificate
        id: install-apple-certificate
        if: ${{ matrix.os == 'macos-latest' }}
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> $GITHUB_OUTPUT

          # import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: Load notarization credentials
        id: notarization-creds
        if: steps.install-apple-certificate.outcome == 'success'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          NOTARIZATION_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          touch notarization.properties
          echo "APPLE_ID=$APPLE_ID" >> notarization.properties
          echo "NOTARIZATION_PASSWORD=$NOTARIZATION_PASSWORD" >> notarization.properties
          echo "TEAM_ID=$TEAM_ID" >> notarization.properties
      - name: Notarize DMG
        if: steps.notarization-creds.outcome == 'success'
        env:
          APPLE_KEYCHAIN_PATH: ${{ steps.install-apple-certificate.outputs.KEYCHAIN_PATH }}
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
        run: ./gradlew :composeApp:notarizeDmg -Pcompose.desktop.mac.sign=true
      - name: Clean up keychain
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            composeApp/build/compose/binaries/main/**/*.dmg
            composeApp/build/compose/binaries/main/**/*.msi
            composeApp/build/compose/binaries/main/**/*.deb
